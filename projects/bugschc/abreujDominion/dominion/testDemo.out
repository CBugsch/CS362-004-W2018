profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Function: discardCard() ----------------[0m
TEST 1: Card is no longer in hand 
[32m[01;33m
Test Passed: 1/1[0m

TEST 2: Discarded card count 
[31m	discard count = 0, expected = 1[01;33m
Test Passed: 0/1[0m

TEST 3: Trash a card
[31m	trashed card count = 0, expected = 1[01;33m
Test Passed: 0/1[0m

TEST 4: Trashed card was not played
[32m	played card count = 0, expected = 0[01;33m
Test Passed: 1/1[0m

TEST 5: Discard last card in hand
[32m[01;33m
Test Passed: 1/1[0m

TEST 6: Discard only card in hand
[32m[32m
	cards in hand = 0, expected = 0[01;33m
Test Passed: 2/2[0m
[01;33m
Total Test Passed: 5/7[0m[31m
 >> >> > FAILED: Testing complete discardCard() << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Function: updateCoins() ----------------[0m
TEST 1: Coin count goes down 
Changing silver to copper...
[32m	coins = 9, expected = 9[01;33m
Test Passed: 1/1[0m

TEST 2: Coin count goes up 
Changing copper back to silver...
[32m	coins = 10, expected = 10[01;33m
Test Passed: 1/1[0m

TEST 3: Bonus get applied 
Applying a +2 bonus...
[32m	coins = 12, expected = 12[01;33m
Test Passed: 1/1[0m

TEST 4: Correct value of copper 
[32m	coins = 1, expected = 1[01;33m
Test Passed: 1/1[0m

TEST 5: Correct value of silver 
[32m	coins = 2, expected = 2[01;33m
Test Passed: 1/1[0m

TEST 6: Correct value of gold 
[32m	coins = 3, expected = 3[01;33m
Test Passed: 1/1[0m
[01;33m
Total Test Passed: 6/6[0m[32m
 >> >> > SUCCESS: Testing complete updateCoins() << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Function: isGameOver() ----------------[0m
TEST 1: No province cards left 
[32m	result = Game over, expected = Game over[01;33m
Test Passed: 1/1[0m

TEST 2: More then 3 kingdom decks empty 
[32m	result = Game over, expected = Game over[01;33m
Test Passed: 1/1[0m

TEST 3: All coin decks empty 
[32m	result = Game over, expected = Game over[01;33m
Test Passed: 1/1[0m

TEST 4: Random decks empty 
[32m	result = Game over, expected = Game over[01;33m
Test Passed: 1/1[0m

TEST 5: No cards drawn 
[32m	result = Game not over, expected = Game not over[01;33m
Test Passed: 1/1[0m
[01;33m
Total Test Passed: 5/5[0m[32m
 >> >> > SUCCESS: Testing complete isGameOver() << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Function: scoreFor() ----------------[0m
TEST 1: Score of curse 
[32m	score = -1, expected = -1[01;33m
Test Passed: 1/1[0m

TEST 2: Score of estate 
[32m	score = 1, expected = 1[01;33m
Test Passed: 1/1[0m

TEST 3: Score of duchy 
[32m	score = 3, expected = 3[01;33m
Test Passed: 1/1[0m

TEST 4: Score of province 
[32m	score = 6, expected = 6[01;33m
Test Passed: 1/1[0m

TEST 5: Score of great hall 
[32m	score = 1, expected = 1[01;33m
Test Passed: 1/1[0m

TEST 6: Score of gardens with 9 cards 
[32m	score = 8, expected = 8[01;33m
Test Passed: 1/1[0m

TEST 7: Score of gardens with 10 cards 
[31m	score = 9, expected = 10[01;33m
Test Passed: 0/1[0m

TEST 8: Score from cards in hand 
[32m	score = 5, expected = 5[01;33m
Test Passed: 1/1[0m

TEST 9: Score from cards in deck 
[31m	score = 0, expected = 5[01;33m
Test Passed: 0/1[0m

TEST 10: Score from cards discarded 
[31m	score = 7, expected = 5[01;33m
Test Passed: 0/1[0m

TEST 11: Score from cards trashed 
[31m	score = 1, expected = 0[01;33m
Test Passed: 0/1[0m
[01;33m
Total Test Passed: 7/11[0m[31m
 >> >> > FAILED: Testing complete scoreFor() << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Card: Smithy ----------------[0m
TEST 1: Current player receives exactly 3 cards
[31m	hand count = 5, expected = 7[0m
[31m	deck count = 4, expected = 2[0m
[31m	discard deck count = 0, expected = 1[0m
[01;33mTest Passed: 0/3[0m

TEST 2: No state change to other players
Player 1:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
Player 2:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
[01;33mTest Passed: 8/8[0m

TEST 3: No state change to supply decks
[32m	Number of  cards = 20, expected = 20[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 39, expected = 39[0m
[32m	Number of  cards = 40, expected = 40[0m
[32m	Number of  cards = 30, expected = 30[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[01;33mTest Passed: 17/17[0m
[01;33m
Total Test Passed: 25/28[0m[31m
 >> >> > FAILED: Testing complete Smithy << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Card: Adventurer ----------------[0m
TEST 1: Current player has two additional treasure cards in hand
[31m	hand count = 8, expected = 6[0m
[32m	coin count = 6, expected  at least = 5[0m
[32m	starting cards:	7, 4, 1, 4, 4, 
	ending cards:	7, 4, 1, 4, 4, 4, 4, 4, [01;33m
Test Passed: 2/3[0m

TEST 2: No state change to other players
Player 1:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
Player 2:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
[01;33mTest Passed: 8/8[0m

TEST 3: No state change to supply decks
[32m	Number of  cards = 20, expected = 20[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 39, expected = 39[0m
[32m	Number of  cards = 40, expected = 40[0m
[32m	Number of  cards = 30, expected = 30[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[01;33mTest Passed: 17/17[0m
[01;33m
Total Test Passed: 27/28[0m[31m
 >> >> > FAILED: Testing complete Adventurer << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Card: Village ----------------[0m
TEST 1: Current player receives exactly 1 cards and discards village card
[32m	hand count = 5, expected = 5[0m
[32m	deck count = 4, expected = 4[0m
[31m	discard deck count = 0, expected = 1[0m
[32m	starting cards:	14, 4, 1, 4, 4, 
	ending cards:	4, 4, 1, 4, 4, [01;33m
Test Passed: 3/4[0m

TEST 2: Player has exactly 2 additional actions
[31m	Number of actions left = 1, expected = 2[0m
[01;33mTest Passed: 0/1[0m

TEST 3: No state change to other players
Player 1:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
Player 2:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
[01;33mTest Passed: 8/8[0m

TEST 4: No state change to supply decks
[32m	Number of cards = 20, expected = 20[0m
[32m	Number of cards = 12, expected = 12[0m
[32m	Number of cards = 12, expected = 12[0m
[32m	Number of cards = 12, expected = 12[0m
[32m	Number of cards = 39, expected = 39[0m
[32m	Number of cards = 40, expected = 40[0m
[32m	Number of cards = 30, expected = 30[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[32m	Number of cards = 10, expected = 10[0m
[01;33mTest Passed: 17/17[0m
[01;33m
Total Test Passed: 28/30[0m[31m
 >> >> > FAILED: Testing complete Village << << < [0m

profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362:Cannot create directory
profiling:/nfs/stak/users/abreuj/18Winter/softEngr2-cs362/CS362-004-W2018/projects/abreuj/dominion/rngs.gcda:Skip
[01;33m----------------- Testing Card: Salvager ----------------[0m
TEST 1: Current player has correct number of cards in hand
[32m	hand count = 3, expected = 3[0m
[01;33mTest Passed: 1/1[0m

TEST 2: Player discarded correct cards and gained correct number of coins
[33mStarting cards:	24, 1, 14, 13, 17, 
Starting coins: 4[0m
Discarding 1 (cost = 2)...
[32m	ending cards:	131714[32m
	Coins = 6, expected = 6[0m
Discarding 14 (cost = 3)...
[32m	ending cards:	13117[32m
	Coins = 7, expected = 7[0m
Discarding 13 (cost = 4)...
[32m	ending cards:	17114[32m
	Coins = 8, expected = 8[0m
Discarding 17 (cost = 5)...
[32m	ending cards:	13114[32m
	Coins = 9, expected = 9[0m
[01;33mTest Passed: 8/8[0m

TEST 3: Trashed card was properly trashed[32m
	cards played = 24, expected = salvager[0m
[32m	played cards = 1, expected = 1[0m
[31m	discard deck count = 0, expected = 2[0m
[01;33mTest Passed: 2/3[0m

TEST 4: No state change to other players
Player 1:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
Player 2:
[32m	hand count = 0, expected = 0[0m
[32m	deck count = 10, expected = 10[0m
[32m	discard deck count = 0, expected = 0[0m
[32m	current score = 0, expected = 0[0m
[01;33mTest Passed: 8/8[0m

TEST 5: No state change to supply decks
[32m	Number of  cards = 20, expected = 20[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 12, expected = 12[0m
[32m	Number of  cards = 39, expected = 39[0m
[32m	Number of  cards = 40, expected = 40[0m
[32m	Number of  cards = 30, expected = 30[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[32m	Number of  cards = 10, expected = 10[0m
[01;33mTest Passed: 17/17[0m
[01;33m
Total Test Passed: 36/37[0m[31m
 >> >> > FAILED: Testing complete Salvager << << < [0m

File 'dominion.c'
Lines executed:40.32% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:38
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   883530:    8:int compare(const void* a, const void* b) {
   883530:    9:  if (*(int*)a > *(int*)b)
   441919:   10:    return 1;
   441611:   11:  if (*(int*)a < *(int*)b)
   195823:   12:    return -1;
   245788:   13:  return 0;
        -:   14:}
        -:   15:
        -:   16:
        -:   17:
        -:   18:
    #####:   19:struct gameState* newGame() {
    #####:   20:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   21:  return g;
        -:   22:}
        -:   23:
        -:   24:
        -:   25:
        -:   26:
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        -:   44:
        -:   45:
        -:   46:
        -:   47:
       35:   48:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   49:		   struct gameState *state) {
        -:   50:
        -:   51:  int i;
        -:   52:  int j;
        -:   53:  int it;			
        -:   54:  //set up random number generator
       35:   55:  SelectStream(1);
       35:   56:  PutSeed((long)randomSeed);
        -:   57:  
        -:   58:  //check number of players
       35:   59:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   60:    {
    #####:   61:      return -1;
        -:   62:    }
        -:   63:
        -:   64:  //set number of players
       35:   65:  state->numPlayers = numPlayers;
        -:   66:
        -:   67:  //check selected kingdom cards are different
      385:   68:  for (i = 0; i < 10; i++)
        -:   69:    {
     3850:   70:      for (j = 0; j < 10; j++)
        -:   71:        {
     3500:   72:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   73:	    {
    #####:   74:	      return -1;
        -:   75:	    }
        -:   76:        }
        -:   77:    }
        -:   78:
        -:   79:
        -:   80:  //initialize supply
        -:   81:  ///////////////////////////////
        -:   82:
        -:   83:  //set number of Curse cards
       35:   84:  if (numPlayers == 2)
        -:   85:    {
       16:   86:      state->supplyCount[curse] = 10;
        -:   87:    }
       19:   88:  else if (numPlayers == 3)
        -:   89:    {
       19:   90:      state->supplyCount[curse] = 20;
        -:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[curse] = 30;
        -:   95:    }
        -:   96:
        -:   97:  //set number of Victory cards
       35:   98:  if (numPlayers == 2)
        -:   99:    {
       16:  100:      state->supplyCount[estate] = 8;
       16:  101:      state->supplyCount[duchy] = 8;
       16:  102:      state->supplyCount[province] = 8;
        -:  103:    }
        -:  104:  else
        -:  105:    {
       19:  106:      state->supplyCount[estate] = 12;
       19:  107:      state->supplyCount[duchy] = 12;
       19:  108:      state->supplyCount[province] = 12;
        -:  109:    }
        -:  110:
        -:  111:  //set number of Treasure cards
       35:  112:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       35:  113:  state->supplyCount[silver] = 40;
       35:  114:  state->supplyCount[gold] = 30;
        -:  115:
        -:  116:  //set number of Kingdom cards
      735:  117:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  118:    {
     5775:  119:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  120:	{
     5425:  121:	  if (kingdomCards[j] == i)
        -:  122:	    {
        -:  123:	      //check if card is a 'Victory' Kingdom card
      350:  124:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  125:		{
       16:  126:		  if (numPlayers == 2){ 
        8:  127:		    state->supplyCount[i] = 8; 
        -:  128:		  }
    #####:  129:		  else{ state->supplyCount[i] = 12; }
        -:  130:		}
        -:  131:	      else
        -:  132:		{
      342:  133:		  state->supplyCount[i] = 10;
        -:  134:		}
      350:  135:	      break;
        -:  136:	    }
        -:  137:	  else    //card is not in the set choosen for the game
        -:  138:	    {
     5075:  139:	      state->supplyCount[i] = -1;
        -:  140:	    }
        -:  141:	}
        -:  142:
        -:  143:    }
        -:  144:
        -:  145:  ////////////////////////
        -:  146:  //supply intilization complete
        -:  147:
        -:  148:  //set player decks
      124:  149:  for (i = 0; i < numPlayers; i++)
        -:  150:    {
       89:  151:      state->deckCount[i] = 0;
      356:  152:      for (j = 0; j < 3; j++)
        -:  153:	{
      267:  154:	  state->deck[i][j] = estate;
      267:  155:	  state->deckCount[i]++;
        -:  156:	}
      712:  157:      for (j = 3; j < 10; j++)
        -:  158:	{
      623:  159:	  state->deck[i][j] = copper;
      623:  160:	  state->deckCount[i]++;		
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //shuffle player decks
      124:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {
       89:  167:      if ( shuffle(i, state) < 0 )
        -:  168:	{
    #####:  169:	  return -1;
        -:  170:	}
        -:  171:    }
        -:  172:
        -:  173:  //draw player hands
      124:  174:  for (i = 0; i < numPlayers; i++)
        -:  175:    {  
        -:  176:      //initialize hand size to zero
       89:  177:      state->handCount[i] = 0;
       89:  178:      state->discardCount[i] = 0;
        -:  179:      //draw 5 cards
        -:  180:      // for (j = 0; j < 5; j++)
        -:  181:      //	{
        -:  182:      //	  drawCard(i, state);
        -:  183:      //	}
        -:  184:    }
        -:  185:  
        -:  186:  //set embargo tokens to 0 for all supply piles
      980:  187:  for (i = 0; i <= treasure_map; i++)
        -:  188:    {
      945:  189:      state->embargoTokens[i] = 0;
        -:  190:    }
        -:  191:
        -:  192:  //initialize first player's turn
       35:  193:  state->outpostPlayed = 0;
       35:  194:  state->phase = 0;
       35:  195:  state->numActions = 1;
       35:  196:  state->numBuys = 1;
       35:  197:  state->playedCardCount = 0;
       35:  198:  state->whoseTurn = 0;
       35:  199:  state->handCount[state->whoseTurn] = 0;
        -:  200:  //int it; move to top
        -:  201:
        -:  202:  //Moved draw cards to here, only drawing at the start of a turn
      210:  203:  for (it = 0; it < 5; it++){
      175:  204:    drawCard(state->whoseTurn, state);
        -:  205:  }
        -:  206:
       35:  207:  updateCoins(state->whoseTurn, state, 0);
        -:  208:
       35:  209:  return 0;
        -:  210:}
        -:  211:
        -:  212:
        -:  213:
        -:  214:
     1089:  215:int shuffle(int player, struct gameState *state) {
        -:  216:  int newDeck[MAX_DECK];
     1089:  217:  int newDeckPos = 0;
        -:  218:  int card;
        -:  219:  int i;
        -:  220:
     1089:  221:  if (state->deckCount[player] < 1)
      505:  222:    return -1;
      584:  223:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  224:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  225:
   128495:  226:  while (state->deckCount[player] > 0) {
   127327:  227:    card = floor(Random() * state->deckCount[player]);
   127327:  228:    newDeck[newDeckPos] = state->deck[player][card];
   127327:  229:    newDeckPos++;
 10717717:  230:    for (i = card; i < state->deckCount[player]-1; i++) {
 10590390:  231:      state->deck[player][i] = state->deck[player][i+1];
        -:  232:    }
   127327:  233:    state->deckCount[player]--;
        -:  234:  }
   127911:  235:  for (i = 0; i < newDeckPos; i++) {
   127327:  236:    state->deck[player][i] = newDeck[i];
   127327:  237:    state->deckCount[player]++;
        -:  238:  }
        -:  239:
      584:  240:  return 0;
        -:  241:}
        -:  242:
        -:  243:
        -:  244:
        -:  245:
        -:  246:
        -:  247:
    #####:  248:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  249:  int card;
    #####:  250:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  251:
        -:  252:  //check if it is the right phase
    #####:  253:  if (state->phase != 0)
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //check if player has enough actions
    #####:  259:  if ( state->numActions < 1 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //get card played
    #####:  265:  card = handCard(handPos, state);
        -:  266:	
        -:  267:  //check if selected card is an action
    #####:  268:  if ( card < adventurer || card > treasure_map )
        -:  269:    {
    #####:  270:      return -1;
        -:  271:    }
        -:  272:	
        -:  273:  //play card
    #####:  274:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  275:    {
    #####:  276:      return -1;
        -:  277:    }
        -:  278:	
        -:  279:  //reduce number of actions
    #####:  280:  state->numActions--;
        -:  281:
        -:  282:  //update coins (Treasure cards may be added with card draws)
    #####:  283:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  284:	
    #####:  285:  return 0;
        -:  286:}
        -:  287:
        -:  288:
        -:  289:
        -:  290:
        -:  291:
    #####:  292:int buyCard(int supplyPos, struct gameState *state) {
        -:  293:  int who;
        -:  294:  if (DEBUG){
        -:  295:    printf("Entering buyCard...\n");
        -:  296:  }
        -:  297:
        -:  298:  // I don't know what to do about the phase thing.
        -:  299:
    #####:  300:  who = state->whoseTurn;
        -:  301:
    #####:  302:  if (state->numBuys < 1){
        -:  303:    if (DEBUG)
        -:  304:      printf("You do not have any buys left\n");
    #####:  305:    return -1;
    #####:  306:  } else if (supplyCount(supplyPos, state) <1){
        -:  307:    if (DEBUG)
        -:  308:      printf("There are not any of that type of card left\n");
    #####:  309:    return -1;
    #####:  310:  } else if (state->coins < getCost(supplyPos)){
        -:  311:    if (DEBUG) 
        -:  312:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  313:    return -1;
        -:  314:  } else {
    #####:  315:    state->phase=1;
        -:  316:    //state->supplyCount[supplyPos]--;
    #####:  317:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  318:  
    #####:  319:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  320:    state->numBuys--;
        -:  321:    if (DEBUG)
        -:  322:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  323:  }
        -:  324:
        -:  325:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  326:  //state->discardCount[who]++;
        -:  327:    
    #####:  328:  return 0;
        -:  329:}
        -:  330:
        -:  331:
        -:  332:
        -:  333:
        -:  334:
    #####:  335:int numHandCards(struct gameState *state) {
    #####:  336:  return state->handCount[ whoseTurn(state) ];
        -:  337:}
        -:  338:
        -:  339:
        -:  340:
        -:  341:
      154:  342:int handCard(int handPos, struct gameState *state) {
      154:  343:  int currentPlayer = whoseTurn(state);
      154:  344:  return state->hand[currentPlayer][handPos];
        -:  345:}
        -:  346:
        -:  347:
        -:  348:
        -:  349:
        -:  350:
        -:  351:
    #####:  352:int supplyCount(int card, struct gameState *state) {
    #####:  353:  return state->supplyCount[card];
        -:  354:}
        -:  355:
        -:  356:
        -:  357:
        -:  358:
        -:  359:
        8:  360:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  361:  int i;
        8:  362:  int count = 0;
        -:  363:
       28:  364:  for (i = 0; i < state->deckCount[player]; i++)
        -:  365:    {
       20:  366:      if (state->deck[player][i] == card) count++;
        -:  367:    }
        -:  368:
       84:  369:  for (i = 0; i < state->handCount[player]; i++)
        -:  370:    {
       76:  371:      if (state->hand[player][i] == card) count++;
        -:  372:    }
        -:  373:
        8:  374:  for (i = 0; i < state->discardCount[player]; i++)
        -:  375:    {
    #####:  376:      if (state->discard[player][i] == card) count++;
        -:  377:    }
        -:  378:
        8:  379:  return count;
        -:  380:}
        -:  381:
        -:  382:
        -:  383:
        -:  384:
        -:  385:
      185:  386:int whoseTurn(struct gameState *state) {
      185:  387:  return state->whoseTurn;
        -:  388:}
        -:  389:
        -:  390:
        -:  391:
        -:  392:
        -:  393:
    #####:  394:int endTurn(struct gameState *state) {
        -:  395:  int k;
        -:  396:  int i;
    #####:  397:  int currentPlayer = whoseTurn(state);
        -:  398:  
        -:  399:  //Discard hand
    #####:  400:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  401:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  402:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  403:  }
    #####:  404:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  405:    
        -:  406:  //Code for determining the player
    #####:  407:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  408:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  409:  }
        -:  410:  else{
    #####:  411:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  412:  }
        -:  413:
    #####:  414:  state->outpostPlayed = 0;
    #####:  415:  state->phase = 0;
    #####:  416:  state->numActions = 1;
    #####:  417:  state->coins = 0;
    #####:  418:  state->numBuys = 1;
    #####:  419:  state->playedCardCount = 0;
    #####:  420:  state->handCount[state->whoseTurn] = 0;
        -:  421:
        -:  422:  //int k; move to top
        -:  423:  //Next player draws hand
    #####:  424:  for (k = 0; k < 5; k++){
    #####:  425:    drawCard(state->whoseTurn, state);//Draw a card
        -:  426:  }
        -:  427:
        -:  428:  //Update money
    #####:  429:  updateCoins(state->whoseTurn, state , 0);
        -:  430:
    #####:  431:  return 0;
        -:  432:}
        -:  433:
        -:  434:
        -:  435:
        -:  436:
        -:  437:
       20:  438:int isGameOver(struct gameState *state) {
        -:  439:  int i;
        -:  440:  int j;
        -:  441:	
        -:  442:  //if stack of Province cards is empty, the game ends
       20:  443:  if (state->supplyCount[province] == 0)
        -:  444:    {
        4:  445:      return 1;
        -:  446:    }
        -:  447:
        -:  448:  //if three supply pile are at 0, the game ends
       16:  449:  j = 0;
      416:  450:  for (i = 0; i < 25; i++) {
      400:  451:      if (state->supplyCount[i] == 0)
       36:  452:	      j++;
        -:  453:  }
       16:  454:  if ( j >= 3) {
       12:  455:      return 1;
        -:  456:  }
        -:  457:
        4:  458:  return 0;
        -:  459:}
        -:  460:
        -:  461:
        -:  462:
        -:  463:
        -:  464:
      196:  465:int scoreFor (int player, struct gameState *state) {
        -:  466:  int i;
      196:  467:  int score = 0;
        -:  468:  //score from hand
      328:  469:  for (i = 0; i < state->handCount[player]; i++)
        -:  470:    {
      132:  471:      if (state->hand[player][i] == curse) { score = score - 1; };
      132:  472:      if (state->hand[player][i] == estate) { score = score + 1; };
      132:  473:      if (state->hand[player][i] == duchy) { score = score + 3; };
      132:  474:      if (state->hand[player][i] == province) { score = score + 6; };
      132:  475:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      132:  476:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  477:    }
        -:  478:
        -:  479:  //score from discard
      216:  480:  for (i = 0; i < state->discardCount[player]; i++)
        -:  481:    {
       20:  482:      if (state->discard[player][i] == curse) { score = score - 1; };
       20:  483:      if (state->discard[player][i] == estate) { score = score + 1; };
       20:  484:      if (state->discard[player][i] == duchy) { score = score + 3; };
       20:  485:      if (state->discard[player][i] == province) { score = score + 6; };
       20:  486:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       20:  487:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  488:    }
        -:  489:
        -:  490:  //score from deck
      216:  491:  for (i = 0; i < state->discardCount[player]; i++)
        -:  492:    {
       20:  493:      if (state->deck[player][i] == curse) { score = score - 1; };
       20:  494:      if (state->deck[player][i] == estate) { score = score + 1; };
       20:  495:      if (state->deck[player][i] == duchy) { score = score + 3; };
       20:  496:      if (state->deck[player][i] == province) { score = score + 6; };
       20:  497:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       20:  498:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  499:    }
        -:  500:
      196:  501:  return score;
        -:  502:}
        -:  503:
        -:  504:
        -:  505:
        -:  506:
        -:  507:
    #####:  508:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  509:  int i;	
        -:  510:  int j;
        -:  511:  int highScore;
        -:  512:  int currentPlayer;
        -:  513:
        -:  514:  //get score for each player
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
        -:  517:      //set unused player scores to -9999
    #####:  518:      if (i >= state->numPlayers)
        -:  519:	{
    #####:  520:	  players[i] = -9999;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = scoreFor (i, state);
        -:  525:	}
        -:  526:    }
        -:  527:
        -:  528:  //find highest score
    #####:  529:  j = 0;
    #####:  530:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  531:    {
    #####:  532:      if (players[i] > players[j])
        -:  533:	{
    #####:  534:	  j = i;
        -:  535:	}
        -:  536:    }
    #####:  537:  highScore = players[j];
        -:  538:
        -:  539:  //add 1 to players who had less turns
    #####:  540:  currentPlayer = whoseTurn(state);
    #####:  541:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  542:    {
    #####:  543:      if ( players[i] == highScore && i > currentPlayer )
        -:  544:	{
    #####:  545:	  players[i]++;
        -:  546:	}
        -:  547:    }
        -:  548:
        -:  549:  //find new highest score
    #####:  550:  j = 0;
    #####:  551:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:      if ( players[i] > players[j] )
        -:  554:	{
    #####:  555:	  j = i;
        -:  556:	}
        -:  557:    }
    #####:  558:  highScore = players[j];
        -:  559:
        -:  560:  //set winners in array to 1 and rest to 0
    #####:  561:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  562:    {
    #####:  563:      if ( players[i] == highScore )
        -:  564:	{
    #####:  565:	  players[i] = 1;
        -:  566:	}
        -:  567:      else
        -:  568:	{
    #####:  569:	  players[i] = 0;
        -:  570:	}
        -:  571:    }
        -:  572:
    #####:  573:  return 0;
        -:  574:}
        -:  575:
        -:  576:
        -:  577:
        -:  578:
        -:  579:
        -:  580:
        -:  581:
   279912:  582:int drawCard(int player, struct gameState *state)
        -:  583:{	int count;
        -:  584:  int deckCounter;
   279912:  585:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  586:    
        -:  587:    //Step 1 Shuffle the discard pile back into a deck
        -:  588:    int i;
        -:  589:    //Move discard to deck
   126953:  590:    for (i = 0; i < state->discardCount[player];i++){
   126437:  591:      state->deck[player][i] = state->discard[player][i];
   126437:  592:      state->discard[player][i] = -1;
        -:  593:    }
        -:  594:
      516:  595:    state->deckCount[player] = state->discardCount[player];
      516:  596:    state->discardCount[player] = 0;//Reset discard
        -:  597:
        -:  598:    //Shufffle the deck
      516:  599:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  600:   
        -:  601:    if (DEBUG){//Debug statements
        -:  602:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  603:    }
        -:  604:    
      516:  605:    state->discardCount[player] = 0;
        -:  606:
        -:  607:    //Step 2 Draw Card
      516:  608:    count = state->handCount[player];//Get current player's hand count
        -:  609:    
        -:  610:    if (DEBUG){//Debug statements
        -:  611:      printf("Current hand count: %d\n", count);
        -:  612:    }
        -:  613:    
      516:  614:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  615:
      516:  616:    if (deckCounter == 0)
       21:  617:      return -1;
        -:  618:
      495:  619:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      495:  620:    state->deckCount[player]--;
      495:  621:    state->handCount[player]++;//Increment hand count
        -:  622:  }
        -:  623:
        -:  624:  else{
   279396:  625:    int count = state->handCount[player];//Get current hand count for player
        -:  626:    int deckCounter;
        -:  627:    if (DEBUG){//Debug statements
        -:  628:      printf("Current hand count: %d\n", count);
        -:  629:    }
        -:  630:
   279396:  631:    deckCounter = state->deckCount[player];//Create holder for the deck count
   279396:  632:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   279396:  633:    state->deckCount[player]--;
   279396:  634:    state->handCount[player]++;//Increment hand count
        -:  635:  }
        -:  636:
   279891:  637:  return 0;
        -:  638:}
        -:  639:
        -:  640:
        -:  641:
        -:  642:
       27:  643:int getCost(int cardNumber) {
       27:  644:  switch( cardNumber ) 
        -:  645:    {
        -:  646:    case curse:
    #####:  647:      return 0;
        -:  648:    case estate:
        9:  649:      return 2;
        -:  650:    case duchy:
    #####:  651:      return 5;
        -:  652:    case province:
    #####:  653:      return 8;
        -:  654:    case copper:
    #####:  655:      return 0;
        -:  656:    case silver:
    #####:  657:      return 3;
        -:  658:    case gold:
    #####:  659:      return 6;
        -:  660:    case adventurer:
    #####:  661:      return 6;
        -:  662:    case council_room:
    #####:  663:      return 5;
        -:  664:    case feast:
    #####:  665:      return 4;
        -:  666:    case gardens:
    #####:  667:      return 4;
        -:  668:    case mine:
    #####:  669:      return 5;
        -:  670:    case remodel:
    #####:  671:      return 4;
        -:  672:    case smithy:
        6:  673:      return 4;
        -:  674:    case village:
        6:  675:      return 3;
        -:  676:    case baron:
    #####:  677:      return 4;
        -:  678:    case great_hall:
    #####:  679:      return 3;
        -:  680:    case minion:
        6:  681:      return 5;
        -:  682:    case steward:
    #####:  683:      return 3;
        -:  684:    case tribute:
    #####:  685:      return 5;
        -:  686:    case ambassador:
    #####:  687:      return 3;
        -:  688:    case cutpurse:
    #####:  689:      return 4;
        -:  690:    case embargo: 
    #####:  691:      return 2;
        -:  692:    case outpost:
    #####:  693:      return 5;
        -:  694:    case salvager:
    #####:  695:      return 4;
        -:  696:    case sea_hag:
    #####:  697:      return 4;
        -:  698:    case treasure_map:
    #####:  699:      return 4;
        -:  700:    }
        -:  701:	
    #####:  702:  return -1;
        -:  703:}
        -:  704:
        -:  705:
        -:  706:
        -:  707:
        -:  708:
        -:  709:
        -:  710:
        -:  711:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  712:// -----------------------------------
        -:  713:// ---- MY FUNCTIONS HERE ------------
        -:  714:// -----------------------------------
        -:  715:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  716:
        -:  717:
        -:  718:// NOTE: BUG ADDED!!
       10:  719:void smithyEffect(int currentPlayer, struct gameState* state, int handPos) {
        -:  720:  int i;
        -:  721:    //+3 Cards
       10:  722:    for (i = 0; i < 3; i++);  // bug: added semi-colon to for loop, so below only runs once
       10:  723:        drawCard(currentPlayer, state);
        -:  724:    
        -:  725:    //discard card from hand
       10:  726:    discardCard(handPos, currentPlayer, state, 0);
       10:  727:}
        -:  728:
        -:  729:
        -:  730:// NOTE: BUG ADDED!!
    10003:  731:void villageEffect(int currentPlayer, struct gameState* state, int handPos) {
        -:  732:    //+1 Card
    10003:  733:    drawCard(currentPlayer, state);
        -:  734:    
        -:  735:    //+2 Actions
    10003:  736:    state->numActions == state->numActions + 2; // bug here (==)
        -:  737:    
        -:  738:    //discard played card from hand
    10003:  739:    discardCard(handPos, currentPlayer, state, 0);
    10003:  740:}
        -:  741:
        -:  742:
        -:  743:// NOTE: BUG ADDED!!
    10003:  744:void adventurerEffect(int drawntreasure, struct gameState* state, int currentPlayer, int cardDrawn, int* temphand, int z) {
   279730:  745:  while(drawntreasure<=2){ // bug here (<)
        -:  746:    //if the deck is empty we need to shuffle discard and add to deck
   259724:  747:    if (state->deckCount[currentPlayer] <1)
      484:  748:      shuffle(currentPlayer, state);
        -:  749:
   259724:  750:    drawCard(currentPlayer, state);
        -:  751:
        -:  752:    //top card of hand is most recently drawn card.
   259724:  753:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  754:
   259724:  755:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30009:  756:      drawntreasure++;
        -:  757:
        -:  758:    else{
   229715:  759:      temphand[z]=cardDrawn;
        -:  760:
        -:  761:      //this should just remove the top card (the most recently drawn one).
   229715:  762:      state->handCount[currentPlayer]--; 
   229715:  763:      z++;
        -:  764:    }
        -:  765:  }
        -:  766:
   249721:  767:  while(z-1>=0){
        -:  768:    // discard all cards in play that have been drawn
   229715:  769:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
   229715:  770:    z=z-1;
        -:  771:  }
    10003:  772:}
        -:  773:
        -:  774:
        -:  775:// NOTE: BUG ADDED!!
    #####:  776:void outpostEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  777:  //set outpost flag
    #####:  778:  state->outpostPlayed++;
        -:  779:  
        -:  780:  //discard card
    #####:  781:  discardCard(0, currentPlayer, state, 0); // bug here, 0 in first arg instead of handPos
    #####:  782:}
        -:  783:
        -:  784:
    10000:  785:void great_hallEffect(struct gameState* state, int currentPlayer, int handPos) {
        -:  786:  //+1 Card
    10000:  787:  drawCard(currentPlayer, state);
        -:  788:
        -:  789:  //+1 Actions
    10000:  790:  state->numActions++;
        -:  791:
        -:  792:  //discard card from hand
    10000:  793:  discardCard(handPos, currentPlayer, state, 0);
    10000:  794:}
        -:  795:
        -:  796:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  797:// -----------------------------------
        -:  798:// ---- MY FUNCTIONS END -------------
        -:  799:// -----------------------------------
        -:  800:// =-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-
        -:  801:
        -:  802:
        -:  803:
        -:  804:
        -:  805:
        -:  806:
        -:  807:
        -:  808:
        -:  809:
        -:  810:
        -:  811:
        -:  812:
        -:  813:
        -:  814:
       31:  815:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
       31:  821:  int currentPlayer = whoseTurn(state);
       31:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
       31:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
       31:  826:  int drawntreasure=0;
        -:  827:  int cardDrawn;
       31:  828:  int z = 0;// this is the counter for the temp hand
       31:  829:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:  
        -:  833:	
        -:  834:  //uses switch to select card and perform actions
       31:  835:  switch( card ) 
        -:  836:    {
        -:  837:
        -:  838:
        -:  839:
        -:  840:    // James Cam Abreu code modified
        -:  841:    case adventurer:
        3:  842:      adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        3:  843:      return 0;
        -:  844:
        -:  845:
        -:  846:
        -:  847:
        -:  848:
        -:  849:
        -:  850:    case council_room:
        -:  851:      //+4 Cards
    #####:  852:      for (i = 0; i < 4; i++)
        -:  853:	{
    #####:  854:	  drawCard(currentPlayer, state);
        -:  855:	}
        -:  856:			
        -:  857:      //+1 Buy
    #####:  858:      state->numBuys++;
        -:  859:			
        -:  860:      //Each other player draws a card
    #####:  861:      for (i = 0; i < state->numPlayers; i++)
        -:  862:	{
    #####:  863:	  if ( i != currentPlayer )
        -:  864:	    {
    #####:  865:	      drawCard(i, state);
        -:  866:	    }
        -:  867:	}
        -:  868:			
        -:  869:      //put played card in played card pile
    #####:  870:      discardCard(handPos, currentPlayer, state, 0);
        -:  871:			
    #####:  872:      return 0;
        -:  873:			
        -:  874:
        -:  875:
        -:  876:
        -:  877:
        -:  878:    case feast:
        -:  879:      //gain card with cost up to 5
        -:  880:      //Backup hand
    #####:  881:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  882:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  883:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  884:      }
        -:  885:      //Backup hand
        -:  886:
        -:  887:      //Update Coins for Buy
    #####:  888:      updateCoins(currentPlayer, state, 5);
    #####:  889:      x = 1;//Condition to loop on
    #####:  890:      while( x == 1) {//Buy one card
    #####:  891:	if (supplyCount(choice1, state) <= 0){
        -:  892:	  if (DEBUG)
        -:  893:	    printf("None of that card left, sorry!\n");
        -:  894:
        -:  895:	  if (DEBUG){
        -:  896:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  897:	  }
        -:  898:	}
    #####:  899:	else if (state->coins < getCost(choice1)){
    #####:  900:	  printf("That card is too expensive!\n");
        -:  901:
        -:  902:	  if (DEBUG){
        -:  903:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  904:	  }
        -:  905:	}
        -:  906:	else{
        -:  907:
        -:  908:	  if (DEBUG){
        -:  909:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  910:	  }
        -:  911:
    #####:  912:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  913:	  x = 0;//No more buying cards
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  917:	  }
        -:  918:
        -:  919:	}
        -:  920:      }     
        -:  921:
        -:  922:      //Reset Hand
    #####:  923:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  924:	state->hand[currentPlayer][i] = temphand[i];
    #####:  925:	temphand[i] = -1;
        -:  926:      }
        -:  927:      //Reset Hand
        -:  928:      			
    #####:  929:      return 0;
        -:  930:			
        -:  931:
        -:  932:
        -:  933:
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
    #####:  938:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  939:
    #####:  940:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  941:	{
    #####:  942:	  return -1;
        -:  943:	}
        -:  944:		
    #####:  945:      if (choice2 > treasure_map || choice2 < curse)
        -:  946:	{
    #####:  947:	  return -1;
        -:  948:	}
        -:  949:
    #####:  950:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      gainCard(choice2, state, 2, currentPlayer);
        -:  956:
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
        -:  959:
        -:  960:      //discard trashed card
    #####:  961:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  962:	{
    #####:  963:	  if (state->hand[currentPlayer][i] == j)
        -:  964:	    {
    #####:  965:	      discardCard(i, currentPlayer, state, 0);			
    #####:  966:	      break;
        -:  967:	    }
        -:  968:	}
        -:  969:			
    #####:  970:      return 0;
        -:  971:			
        -:  972:
        -:  973:
        -:  974:
        -:  975:
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:
        -: 1003:
        -: 1004:
        -: 1005:
        -: 1006:    // James Cam Abreu code modified
        -: 1007:    case smithy: 
       10: 1008:      smithyEffect(currentPlayer, state, handPos);
       10: 1009:      return 0;
        -: 1010:
        -: 1011:
        -: 1012:    // James Cam Abreu code modified
        -: 1013:    case village:
        3: 1014:      villageEffect(currentPlayer, state, handPos);
        3: 1015:      return 0;
        -: 1016:
        -: 1017:
        -: 1018:
        -: 1019:
        -: 1020:
        -: 1021:    case baron:
    #####: 1022:      state->numBuys++;//Increase buys by 1!
    #####: 1023:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1024:	int p = 0;//Iterator for hand!
    #####: 1025:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1026:	while(card_not_discarded){
    #####: 1027:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1028:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1029:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1030:	    state->discardCount[currentPlayer]++;
    #####: 1031:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1032:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1033:	    }
    #####: 1034:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1035:	    state->handCount[currentPlayer]--;
    #####: 1036:	    card_not_discarded = 0;//Exit the loop
        -: 1037:	  }
    #####: 1038:	  else if (p > state->handCount[currentPlayer]){
        -: 1039:	    if(DEBUG) {
        -: 1040:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1041:	      printf("Must gain an estate if there are any\n");
        -: 1042:	    }
    #####: 1043:	    if (supplyCount(estate, state) > 0){
    #####: 1044:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1045:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1046:	      if (supplyCount(estate, state) == 0){
    #####: 1047:		isGameOver(state);
        -: 1048:	      }
        -: 1049:	    }
    #####: 1050:	    card_not_discarded = 0;//Exit the loop
        -: 1051:	  }
        -: 1052:			    
        -: 1053:	  else{
    #####: 1054:	    p++;//Next card
        -: 1055:	  }
        -: 1056:	}
        -: 1057:      }
        -: 1058:			    
        -: 1059:      else{
    #####: 1060:	if (supplyCount(estate, state) > 0){
    #####: 1061:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1062:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1063:	  if (supplyCount(estate, state) == 0){
    #####: 1064:	    isGameOver(state);
        -: 1065:	  }
        -: 1066:	}
        -: 1067:      }
        -: 1068:	    
        -: 1069:      
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:
        -: 1073:
        -: 1074:
        -: 1075:    // James Cam Abreu code modified
        -: 1076:    case great_hall:
    #####: 1077:      great_hallEffect(state, currentPlayer, handPos);
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:
        -: 1081:
        -: 1082:
        -: 1083:    case minion:
        -: 1084:      //+1 action
    #####: 1085:      state->numActions++;
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
        -: 1089:			
    #####: 1090:      if (choice1)		//+2 coins
        -: 1091:	{
    #####: 1092:	  state->coins = state->coins + 2;
        -: 1093:	}
        -: 1094:			
    #####: 1095:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1096:	{
        -: 1097:	  //discard hand
    #####: 1098:	  while(numHandCards(state) > 0)
        -: 1099:	    {
    #####: 1100:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1101:	    }
        -: 1102:				
        -: 1103:	  //draw 4
    #####: 1104:	  for (i = 0; i < 4; i++)
        -: 1105:	    {
    #####: 1106:	      drawCard(currentPlayer, state);
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //other players discard hand and redraw if hand size > 4
    #####: 1110:	  for (i = 0; i < state->numPlayers; i++)
        -: 1111:	    {
    #####: 1112:	      if (i != currentPlayer)
        -: 1113:		{
    #####: 1114:		  if ( state->handCount[i] > 4 )
        -: 1115:		    {
        -: 1116:		      //discard hand
    #####: 1117:		      while( state->handCount[i] > 0 )
        -: 1118:			{
    #####: 1119:			  discardCard(handPos, i, state, 0);
        -: 1120:			}
        -: 1121:							
        -: 1122:		      //draw 4
    #####: 1123:		      for (j = 0; j < 4; j++)
        -: 1124:			{
    #####: 1125:			  drawCard(i, state);
        -: 1126:			}
        -: 1127:		    }
        -: 1128:		}
        -: 1129:	    }
        -: 1130:				
        -: 1131:	}
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:
        -: 1135:
        -: 1136:
        -: 1137:
        -: 1138:
        -: 1139:
        -: 1140:    case steward:
    #####: 1141:      if (choice1 == 1)
        -: 1142:	{
        -: 1143:	  //+2 cards
    #####: 1144:	  drawCard(currentPlayer, state);
    #####: 1145:	  drawCard(currentPlayer, state);
        -: 1146:	}
    #####: 1147:      else if (choice1 == 2)
        -: 1148:	{
        -: 1149:	  //+2 coins
    #####: 1150:	  state->coins = state->coins + 2;
        -: 1151:	}
        -: 1152:      else
        -: 1153:	{
        -: 1154:	  //trash 2 cards in hand
    #####: 1155:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1156:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1157:	}
        -: 1158:			
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:
        -: 1164:
        -: 1165:
        -: 1166:
        -: 1167:
        -: 1168:
        -: 1169:
        -: 1170:
        -: 1171:
        -: 1172:    case tribute:
    #####: 1173:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1174:	if (state->deckCount[nextPlayer] > 0){
    #####: 1175:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1176:	  state->deckCount[nextPlayer]--;
        -: 1177:	}
    #####: 1178:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1179:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1180:	  state->discardCount[nextPlayer]--;
        -: 1181:	}
        -: 1182:	else{
        -: 1183:	  //No Card to Reveal
        -: 1184:	  if (DEBUG){
        -: 1185:	    printf("No cards to reveal\n");
        -: 1186:	  }
        -: 1187:	}
        -: 1188:      }
        -: 1189:	    
        -: 1190:      else{
    #####: 1191:	if (state->deckCount[nextPlayer] == 0){
    #####: 1192:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1193:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1194:	    state->deckCount[nextPlayer]++;
    #####: 1195:	    state->discard[nextPlayer][i] = -1;
    #####: 1196:	    state->discardCount[nextPlayer]--;
        -: 1197:	  }
        -: 1198:			    
    #####: 1199:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1200:	} 
    #####: 1201:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1202:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1203:	state->deckCount[nextPlayer]--;
    #####: 1204:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1205:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1206:	state->deckCount[nextPlayer]--;
        -: 1207:      }    
        -: 1208:		       
    #####: 1209:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1210:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1211:	state->playedCardCount++;
    #####: 1212:	tributeRevealedCards[1] = -1;
        -: 1213:      }
        -: 1214:
    #####: 1215:      for (i = 0; i <= 2; i ++){
    #####: 1216:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1217:	  state->coins += 2;
        -: 1218:	}
        -: 1219:		    
    #####: 1220:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1221:	  drawCard(currentPlayer, state);
    #####: 1222:	  drawCard(currentPlayer, state);
        -: 1223:	}
        -: 1224:	else{//Action Card
    #####: 1225:	  state->numActions = state->numActions + 2;
        -: 1226:	}
        -: 1227:      }
        -: 1228:	    
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:
        -: 1232:
        -: 1233:
        -: 1234:
        -: 1235:
        -: 1236:
        -: 1237:
        -: 1238:
        -: 1239:
        -: 1240:
        -: 1241:    case ambassador:
    #####: 1242:      j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:      if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:	  return -1;				
        -: 1247:	}
        -: 1248:
    #####: 1249:      if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:	  return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:	    {
    #####: 1258:	      j++;
        -: 1259:	    }
        -: 1260:	}
    #####: 1261:      if (j < choice2)
        -: 1262:	{
    #####: 1263:	  return -1;				
        -: 1264:	}
        -: 1265:
        -: 1266:      if (DEBUG) 
        -: 1267:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:      //increase supply count for choosen card by amount being discarded
    #####: 1270:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:			
        -: 1272:      //each other player gains a copy of revealed card
    #####: 1273:      for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:	  if (i != currentPlayer)
        -: 1276:	    {
    #####: 1277:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:	    }
        -: 1279:	}
        -: 1280:
        -: 1281:      //discard played card from hand
    #####: 1282:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1283:
        -: 1284:      //trash copies of cards returned to supply
    #####: 1285:      for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:	    {
    #####: 1289:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:		{
    #####: 1291:		  discardCard(i, currentPlayer, state, 1);
    #####: 1292:		  break;
        -: 1293:		}
        -: 1294:	    }
        -: 1295:	}			
        -: 1296:
    #####: 1297:      return 0;
        -: 1298:		
        -: 1299:
        -: 1300:
        -: 1301:
        -: 1302:
        -: 1303:
        -: 1304:
        -: 1305:    case cutpurse:
        -: 1306:
    #####: 1307:      updateCoins(currentPlayer, state, 2);
    #####: 1308:      for (i = 0; i < state->numPlayers; i++)
        -: 1309:	{
    #####: 1310:	  if (i != currentPlayer)
        -: 1311:	    {
    #####: 1312:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1313:		{
    #####: 1314:		  if (state->hand[i][j] == copper)
        -: 1315:		    {
    #####: 1316:		      discardCard(j, i, state, 0);
    #####: 1317:		      break;
        -: 1318:		    }
    #####: 1319:		  if (j == state->handCount[i])
        -: 1320:		    {
    #####: 1321:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1322:			{
        -: 1323:			  if (DEBUG)
        -: 1324:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1325:			}	
    #####: 1326:		      break;
        -: 1327:		    }		
        -: 1328:		}
        -: 1329:					
        -: 1330:	    }
        -: 1331:				
        -: 1332:	}				
        -: 1333:
        -: 1334:      //discard played card from hand
    #####: 1335:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1336:
    #####: 1337:      return 0;
        -: 1338:
        -: 1339:		
        -: 1340:
        -: 1341:
        -: 1342:
        -: 1343:
        -: 1344:    case embargo: 
        -: 1345:      //+2 Coins
    #####: 1346:      state->coins = state->coins + 2;
        -: 1347:			
        -: 1348:      //see if selected pile is in play
    #####: 1349:      if ( state->supplyCount[choice1] == -1 )
        -: 1350:	{
    #####: 1351:	  return -1;
        -: 1352:	}
        -: 1353:			
        -: 1354:      //add embargo token to selected supply pile
    #####: 1355:      state->embargoTokens[choice1]++;
        -: 1356:			
        -: 1357:      //trash card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364:
        -: 1365:
        -: 1366:    // James Cam Abreu code modified
        -: 1367:    case outpost:
    #####: 1368:      outpostEffect(state, currentPlayer, handPos);
    #####: 1369:      return 0;
        -: 1370:
        -: 1371:
        -: 1372:
        -: 1373:    case salvager:
        -: 1374:      //+1 buy
       15: 1375:      state->numBuys++;
        -: 1376:			
       15: 1377:      if (choice1)
        -: 1378:	{
        -: 1379:	  //gain coins equal to trashed card
       15: 1380:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1381:	  //trash card
       15: 1382:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1383:	}
        -: 1384:			
        -: 1385:      //discard card
       15: 1386:      discardCard(handPos, currentPlayer, state, 0);
       15: 1387:      return 0;
        -: 1388:		
        -: 1389:
        -: 1390:
        -: 1391:
        -: 1392:
        -: 1393:
        -: 1394:
        -: 1395:
        -: 1396:
        -: 1397:    case sea_hag:
    #####: 1398:      for (i = 0; i < state->numPlayers; i++){
    #####: 1399:	if (i != currentPlayer){
    #####: 1400:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1401:	  state->discardCount[i]++;
    #####: 1402:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1403:	}
        -: 1404:      }
    #####: 1405:      return 0;
        -: 1406:		
        -: 1407:
        -: 1408:
        -: 1409:
        -: 1410:
        -: 1411:
        -: 1412:
        -: 1413:
        -: 1414:
        -: 1415:
        -: 1416:    case treasure_map:
        -: 1417:      //search hand for another treasure_map
    #####: 1418:      index = -1;
    #####: 1419:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1420:	{
    #####: 1421:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1422:	    {
    #####: 1423:	      index = i;
    #####: 1424:	      break;
        -: 1425:	    }
        -: 1426:	}
    #####: 1427:      if (index > -1)
        -: 1428:	{
        -: 1429:	  //trash both treasure cards
    #####: 1430:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1431:	  discardCard(index, currentPlayer, state, 1);
        -: 1432:
        -: 1433:	  //gain 4 Gold cards
    #####: 1434:	  for (i = 0; i < 4; i++)
        -: 1435:	    {
    #####: 1436:	      gainCard(gold, state, 1, currentPlayer);
        -: 1437:	    }
        -: 1438:				
        -: 1439:	  //return success
    #####: 1440:	  return 1;
        -: 1441:	}
        -: 1442:			
        -: 1443:      //no second treasure_map found in hand
    #####: 1444:      return -1;
        -: 1445:    }
        -: 1446:	
    #####: 1447:  return -1;
        -: 1448:}
        -: 1449:
        -: 1450:
        -: 1451:
        -: 1452:
        -: 1453:
    20087: 1454:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1455:  //if card is not trashed, added to Played pile 
    20087: 1456:  if (trashFlag < 1)
        -: 1457:    {
        -: 1458:      //add card to played pile
    20033: 1459:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20033: 1460:      state->playedCardCount++;
        -: 1461:    }
        -: 1462:	
        -: 1463:  //set played card to -1
    20087: 1464:  state->hand[currentPlayer][handPos] = -1;
        -: 1465:	
        -: 1466:  //remove card from player's hand
    20087: 1467:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1468:    {
        -: 1469:      //reduce number of cards in hand
       13: 1470:      state->handCount[currentPlayer]--;
        -: 1471:    }
    20074: 1472:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1473:    {
        -: 1474:      //reduce number of cards in hand
    #####: 1475:      state->handCount[currentPlayer]--;
        -: 1476:    }
        -: 1477:  else 	
        -: 1478:    {
        -: 1479:      //replace discarded card with last card in hand
    20074: 1480:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1481:      //set last card to -1
    20074: 1482:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1483:      //reduce number of cards in hand
    20074: 1484:      state->handCount[currentPlayer]--;
        -: 1485:    }
        -: 1486:	
    20087: 1487:  return 0;
        -: 1488:}
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:
        -: 1494:
        -: 1495:
        -: 1496:
        -: 1497:
        -: 1498:
        -: 1499:
    #####: 1500:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1501:  //Note: supplyPos is enum of choosen card
        -: 1502:	
        -: 1503:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1504:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1505:    {
    #####: 1506:      return -1;
        -: 1507:    }
        -: 1508:	
        -: 1509:  //added card for [whoseTurn] current player:
        -: 1510:  // toFlag = 0 : add to discard
        -: 1511:  // toFlag = 1 : add to deck
        -: 1512:  // toFlag = 2 : add to hand
        -: 1513:
    #####: 1514:  if (toFlag == 1)
        -: 1515:    {
    #####: 1516:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1517:      state->deckCount[player]++;
        -: 1518:    }
    #####: 1519:  else if (toFlag == 2)
        -: 1520:    {
    #####: 1521:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1522:      state->handCount[player]++;
        -: 1523:    }
        -: 1524:  else
        -: 1525:    {
    #####: 1526:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1527:      state->discardCount[player]++;
        -: 1528:    }
        -: 1529:	
        -: 1530:  //decrease number in supply pile
    #####: 1531:  state->supplyCount[supplyPos]--;
        -: 1532:	 
    #####: 1533:  return 0;
        -: 1534:}
        -: 1535:
        -: 1536:
        -: 1537:
        -: 1538:
        -: 1539:
        -: 1540:
    20059: 1541:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1542:  int i;
        -: 1543:	
        -: 1544:  //reset coin count
    20059: 1545:  state->coins = 0;
        -: 1546:
        -: 1547:  //add coins for each Treasure card in player's hand
  5052974: 1548:  for (i = 0; i < state->handCount[player]; i++)
        -: 1549:    {
  5032915: 1550:      if (state->hand[player][i] == copper)
        -: 1551:	{
   201347: 1552:	  state->coins += 1;
        -: 1553:	}
  4831568: 1554:      else if (state->hand[player][i] == silver)
        -: 1555:	{
   201789: 1556:	  state->coins += 2;
        -: 1557:	}
  4629779: 1558:      else if (state->hand[player][i] == gold)
        -: 1559:	{
   202125: 1560:	  state->coins += 3;
        -: 1561:	}	
        -: 1562:    }	
        -: 1563:
        -: 1564:  //add bonus
    20059: 1565:  state->coins += bonus;
        -: 1566:
    20059: 1567:  return 0;
        -: 1568:}
        -: 1569:
        -: 1570:
        -: 1571://end of dominion.c
        -: 1572:
